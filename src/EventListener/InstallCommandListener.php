<?php

/*
 * This file is part of Contao.
 *
 * Copyright (c) 2005-2016 Leo Feyer
 *
 * @license LGPL-3.0+
 */

namespace Contao\ManagerBundle\EventListener;

use Contao\CoreBundle\Command\InstallCommand;
use Contao\ManagerBundle\Command\InstallWebDirCommand;
use Symfony\Component\Console\Event\ConsoleTerminateEvent;
use Symfony\Component\DependencyInjection\ContainerAwareInterface;
use Symfony\Component\DependencyInjection\ContainerAwareTrait;
use Symfony\Component\Filesystem\Filesystem;

/**
 * Installs or overrides files for the Contao Managed Edition on contao:install command.
 *
 * @author Andreas Schempp <https://github.com/aschempp>
 */
class InstallCommandListener implements ContainerAwareInterface
{
    use ContainerAwareTrait;

    public function onConsoleTerminate(ConsoleTerminateEvent $event)
    {
        $command = $event->getCommand();

        if (!$command instanceof InstallCommand) {
            return;
        }

        $this->addInitializePhp();

        $webDirs = new InstallWebDirCommand();
        $webDirs->run($event->getInput(), $event->getOutput());
    }

    /**
     * Adds the initialize.php file.
     */
    private function addInitializePhp()
    {
        $fs = new Filesystem();
        $rootDir = dirname($this->container->getParameter('kernel.root_dir'));

        $fs->dumpFile(
            $rootDir.'/system/initialize.php',
            <<<'EOF'
<?php

use Contao\ManagerBundle\ContaoManager\Plugin as ManagerBundlePlugin;
use Contao\CoreBundle\Response\InitializeControllerResponse;
use Contao\ManagerBundle\HttpKernel\ContaoKernel;
use Doctrine\Common\Annotations\AnnotationRegistry;
use Symfony\Component\HttpFoundation\Request;

if (!defined('TL_SCRIPT')) {
    die('Your script is not compatible with Contao 4.');
}

/** @var Composer\Autoload\ClassLoader */
$loader = require __DIR__.'/../vendor/autoload.php';

AnnotationRegistry::registerLoader([$loader, 'loadClass']);
ManagerBundlePlugin::autoloadModules(__DIR__.'/modules');

$kernel = new ContaoKernel('prod', false);
$kernel->setRootDir(dirname(__DIR__).'/app');
$response = $kernel->handle(Request::create('/_contao/initialize', 'GET', [], [], [], $_SERVER));

// Send the response if not generated by the InitializeController
if (!($response instanceof InitializeControllerResponse)) {
    $response->send();
    $kernel->terminate($request, $response);
    exit;
}

EOF
        );
    }
}
